<?php declare(strict_types=1);

namespace TiendaNube\Throttler\Storage;

use PHPUnit\Framework\TestCase;

class InMemoryTest extends TestCase
{

    public function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testConstructWithoutOptions()
    {
        $storage = new InMemory();
        $options = $storage->getOptions();

        $this->assertGreaterThan(0,count($options));
        $this->assertArrayHasKey('ttl',$options);
    }

    public function testConstructWithOptions()
    {
        $storageDefault = new InMemory();
        $defaultOptions = $storageDefault->getOptions();

        $storageCustom = new InMemory(['ttl' => -1]);
        $customOptions = $storageCustom->getOptions();

        $this->assertGreaterThan(0,count($defaultOptions));
        $this->assertGreaterThan(0,count($customOptions));
        $this->assertArrayHasKey('ttl',$defaultOptions);
        $this->assertArrayHasKey('ttl',$customOptions);
        $this->assertNotEquals($defaultOptions['ttl'],$customOptions['ttl']);
    }

    public function testConstructWithInvalidOptions()
    {
        $storage = new InMemory(['foo' => 'bar']);
        $options = $storage->getOptions();

        $this->assertGreaterThan(0,count($options));
        $this->assertArrayNotHasKey('foo',$options);
    }

    public function testSetNewItem()
    {
        $storage = new InMemory();

        $this->assertTrue($storage->setItem('foo',1));
        $this->assertAttributeCount(1,'items',$storage);
    }

    public function testSetExistentItem()
    {
        $storage = new InMemory();

        $this->assertTrue($storage->setItem('foo',1));
        $this->assertAttributeCount(1,'items',$storage);
        $this->assertTrue($storage->setItem('foo',2));
        $this->assertAttributeCount(1,'items',$storage);
    }

    public function testSetAndGetItem()
    {
        $storage = new InMemory();

        $this->assertTrue($storage->setItem('foo',1));
        $this->assertEquals(1,$storage->getItem('foo'));
    }
}
